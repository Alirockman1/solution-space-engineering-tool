function gui_main(problem)
%% Initialization
clearvars -except problem f result_figure
clc


close(findobj('type','figure','name','user interface'));
close(findobj('type','figure','name','results'));

% f = figure;
f = figure('resize','on','MenuBar','none','ToolBar','none','DockControls','off','windowkeypressfcn',@update);

f.Name = 'user interface';
addpath(fullfile('Data','Design_Problems'));
f.UserData = eval(strcat(problem,'()'));


%% General Definitions
problem = f.UserData;
times = f.UserData.d; % number of layout rows = number of design variables
numqoi = f.UserData.m;% number of quantities of interest
numpar = f.UserData.np;

% General layout definitions
screensize = get( groot, 'Screensize' );
total_width = min(960,screensize(4)-40);
total_height = min((max(times,max(numqoi+1,numpar+1))+1)*40,screensize(4)-60);
set(f,'Position',[0, 0, total_width+40, total_height+60]);

% Define Tabs
%tabgp = uitabgroup(f,'Units','pixels','Position',[20 20 total_width total_height]);
tabgp = uitabgroup(f,'Units','normalized','Position',[20/(total_width+40) 20/(total_height+60) total_width/(total_width+40) total_height/(total_height+60)]);

dv = uitab(tabgp,'Title','Design Variables');
qoi = uitab(tabgp,'Title','Quantities of Interest & Parameters');

%% Check Dimensionality to define size of input window and positioning data
if times >= (numqoi+1) && times >=(numpar+1)
    
    row_start_x = linspace(0.02,1-0.75/times,times+1);
    row_height_x = 0.75*(row_start_x(end)-row_start_x(end-1));
    
    row_start_y = row_start_x(end-(numqoi+1):end);
    row_height_y = row_height_x;
    
    row_start_p = row_start_x(end-(numpar+1):end);
    row_height_p = row_height_x;
    
    row_start_y(end-(numqoi+1):end-2) = flip(row_start_y(end-(numqoi+1):end-2));
    row_start_p(end-(numpar+1):end-2) = flip(row_start_p(end-(numpar+1):end-2));
    row_start_x(1:end-1)=flip(row_start_x(1:end-1));
    row_height_x(end) = 1.08*row_height_x(end);

elseif (numqoi+1) > times && numqoi >= numpar   
    row_start_y = linspace(0.02,1-0.75/(numqoi+1),numqoi+2);
    row_height_y = 0.75*(row_start_y(end)-row_start_y(end-1));
    
    row_start_x = row_start_y(end-times:end);    
    row_height_x = row_height_y;
    
    row_start_p = row_start_y(end-(numpar+1):end);
    row_height_p = row_height_y;    
    
    
    row_start_y(1:end-2) = flip(row_start_y(1:end-2));
    row_start_p(1:end-2) = flip(row_start_p(1:end-2));    
    row_start_x(1:end-1)=flip(row_start_x(1:end-1));
    row_height_x(end) = 1.08*row_height_x(end);
else
    row_start_p = linspace(0.02,1-0.75/(numpar+1),numpar+2);
    row_height_p = 0.75*(row_start_p(end)-row_start_p(end-1));
    
    row_start_x = row_start_p(end-times:end);    
    row_height_x = row_height_p;
    
    row_start_y = row_start_p(end-(numqoi+1):end);
    row_height_y = row_height_p;    
    
    
    row_start_y(1:end-2) = flip(row_start_y(1:end-2));
    row_start_p(1:end-2) = flip(row_start_p(1:end-2));    
    row_start_x(1:end-1)=flip(row_start_x(1:end-1));
    row_height_x(end) = 1.08*row_height_x(end);
    
    
end

%% Design Variable Manipulation window
% Define column starting points and column widths for design variables and
% columns labels
col_start_x = [0 0.09 0.15 0.23 0.34 0.80 0.92];
col_width_x = [0.08 0.06 0.06 0.1 0.45 0.1 0.06];
col_start_x_label = [col_start_x(1:3),0.535,col_start_x(end)];
col_width_x_label = [col_width_x(1:3),0.06,col_width_x(end)];

%x_name_label
uicontrol(...
    'parent',dv,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_x_label(1) row_start_x(end)-0.3*row_height_x col_width_x_label(1) row_height_x],...
    'String','Name');

%x_unit_label
uicontrol(...
    'parent',dv,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_x_label(2) row_start_x(end)-0.3*row_height_x col_width_x_label(2) row_height_x],...
    'String','Unit');

%x_dsl_label
uicontrol(...
    'parent',dv,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_x_label(3) row_start_x(end)-0.0*row_height_x col_width_x_label(3) row_height_x],...
    'String','DS lower limit');

%x_range_label
uicontrol(...
    'parent',dv,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_x_label(4) row_start_x(end)-0.3*row_height_x col_width_x_label(4) row_height_x],...
    'String','Range');

%x_dsu_label
uicontrol(...
    'parent',dv,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_x_label(5) row_start_x(end)-0.0*row_height_x col_width_x_label(5) row_height_x],...
    'String','DS upper limit');

for i=1:times
    
    % design variable name
    annotation(dv,'textbox',...
        'HorizontalAlignment','center',...
        'VerticalAlignment','middle',...
        'Fontsize',9,...
        'EdgeColor','none',...
        'Units','normalized',...
        'position',[col_start_x(1) row_start_x(i) col_width_x(1) row_height_x],...
        'String', problem.x(i).name);
    
    % design variable unit
    annotation(dv,'textbox',...
        'horizontalAlignment','center',...
        'VerticalAlignment','middle',...
        'Fontsize',9,...
        'EdgeColor','none',...
        'Units','normalized',...
        'position',[col_start_x(2) row_start_x(i)  col_width_x(2) row_height_x],...
        'String', problem.x(i).unit);
    
    % design space lower boundary
    uicontrol(...
        'parent', dv,...
        'style','edit',...
        'Units','normalized',...
        'position',[col_start_x(3) row_start_x(i)  col_width_x(3) row_height_x],...
        'min',0,...
        'max',1,...
        'val',1,...
        'string', num2str(problem.x(i).dsl),...
        'tag',['lower_boundary' int2str(i)],...
        'callback',{@edit_box_current_lower_boundary_callback});    
    
    % design variable lower limit
    uicontrol(...
        'parent', dv,...
        'style','edit',...
        'Units','normalized',...
        'position',[col_start_x(4) row_start_x(i) col_width_x(4) row_height_x],...
        'min',0,...
        'max',1,...
        'val',1,...
        'string', num2str(problem.x(i).l),...
        'tag',['current_lower_value' int2str(i)],...
        'callback',{@edit_box_current_lower_value_callback});    
    
    % sliders
    slider_gobj = superSlider(dv,...
        'position',[col_start_x(5) row_start_x(i) col_width_x(5) row_height_x],...
        'min',(0),...
        'max',(1),...
        'numSlides',2,...
        'value',[(problem.x(i).l - problem.x(i).dsl)/(problem.x(i).dsu - problem.x(i).dsl) (problem.x(i).u - problem.x(i).dsl)/(problem.x(i).dsu - problem.x(i).dsl)],...
        'stepSize',0.05,...
        'tagName',['slider' int2str(i)],...
        'callback',{@slider_callback});
     %slider_gobj.Position = [col_start_x(5) row_start_x(i) col_width_x(5) row_height_x];
 
    
    % design variable upper limit
    uicontrol(...
        'parent', dv,...
        'style','edit',...
        'Units','normalized',...
        'position',[col_start_x(6) row_start_x(i) col_width_x(6) row_height_x],...
        'min',0,'max',1,'val',1,...
        'string', num2str(problem.x(i).u),...
        'tag',['current_upper_value' int2str(i)],...
        'callback',{@edit_box_current_upper_value_callback});
    
    % design space upper boundary
        uicontrol(...
        'parent', dv,...
        'style','edit',...
        'Units','normalized',...
        'position',[col_start_x(7) row_start_x(i) col_width_x(7) row_height_x],...
        'min',0,'max',1,'val',1,...
        'string', num2str(problem.x(i).dsu),...
        'tag',['upper_boundary' int2str(i)],...
        'callback',{@edit_box_current_upper_boundary_callback});
end
   
%% Quantities of interest & parameter window

% Define column starting points and column widths for quantities of interest and
% columns labels
col_start_y = [0.0325 0.08 0.11 0.18 0.28 0.38 0.48];   
col_width_y = [0.02 0.02 0.1 0.1 0.08 0.08 0.05];      
col_start_y_label = [0.01 0.065 col_start_y(3:end)];   
col_width_y_label = [0.06 0.05 col_width_y(3:end)];     

col_start_p = [0.65 0.74 0.85];
col_width_p = [0.06 0.06 0.08];

col_start_p_label = [0.65 0.74 0.85];
col_width_p_label = [0.06 0.06 0.08];


% Top row labels
uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'FontSize',12,...
    'position',[0.15 row_start_y(end) 0.25 row_height_y],...
    'String','Quantities of Interest');

uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'FontSize',12,...
    'position',[0.65 row_start_y(end) 0.25 row_height_y],...
    'String','Parameters');


%qoi_visible_checkbox_label
uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_y_label(1) row_start_y(end-1)-0.3*row_height_y col_width_y_label(1) row_height_y],...
    'String','Visible');

%qoi_active_checkbox_label
uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_y_label(2) row_start_y(end-1)-0.3*row_height_y col_width_y_label(2) row_height_y],...
    'String','Active');

%qoi_name_label
uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_y_label(3) row_start_y(end-1)-0.3*row_height_y col_width_y_label(3) row_height_y],...
    'String','Name');

%qoi_unit_label
uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_y_label(4) row_start_y(end-1)-0.3*row_height_y col_width_y_label(4) row_height_y],...
    'String','Unit');


%qoi_lower_limit_label
uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_y_label(5) row_start_y(end-1)-0.3*row_height_y col_width_y_label(5) row_height_y],...
    'String','Lower Limit');


%qoi_upper_limit_label
uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_y_label(6) row_start_y(end-1)-0.3*row_height_y col_width_y_label(6) row_height_y],...
    'String','Upper Limit');

%qoi_color_label = 
uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_y_label(7) row_start_y(end-1)-0.0*row_height_y col_width_y_label(7) row_height_y*1.1],...
    'String','Select Color');


 for i=1:numqoi
     %qoi_visible_checkbox 
     uicontrol(...
         'parent',qoi,...
         'Style','checkbox',...
         'Tag',['visible' int2str(i)],...
         'Units','normalized',...
         'Value',f.UserData.y(i).active,...
         'Position',[col_start_y(1) row_start_y(i) col_width_y(1) row_height_y],...
         'callback',{@visible_set});
     
     %qoi_active_checkbox 
     uicontrol(...
         'parent',qoi,...
         'Style','checkbox',...
         'Tag',['active' int2str(i)],...
         'Units','normalized',...
         'Value',f.UserData.y(i).active,...
         'Position',[col_start_y(2) row_start_y(i) col_width_y(2) row_height_y],...
         'callback',{@active_set});
     
     %qoi_name
     annotation(qoi,'textbox',...
         'horizontalAlignment','center',...
         'VerticalAlignment','middle',...
         'Fontsize',9,...
         'Units','normalized',...
         'EdgeColor','none',...
         'Tag',['qoi_name' int2str(i)],...
         'String',problem.y(i).name,...
         'Position',[col_start_y(3) row_start_y(i)  col_width_y(3) row_height_y]);
        
     %qoi_unit
     annotation(qoi,'textbox',...
         'horizontalAlignment','center',...
         'VerticalAlignment','middle',...
         'Fontsize',9,...
         'Units','normalized',...
         'EdgeColor','none',...
         'Tag',['qoi_name' int2str(i)],...
         'String',problem.y(i).unit,...
         'Position',[col_start_y(4) row_start_y(i)  col_width_y(4) row_height_y]);
     
     
     %qoi_lower_limit
     uicontrol(...
         'parent',qoi,...
         'Style','edit',...
         'Units','normalized',...
         'Tag',['qoi_ll' int2str(i)],...
         'String',num2str(problem.y(i).l),...
         'Position',[col_start_y(5) row_start_y(i) col_width_y(5) row_height_y],...
         'callback',{@change_lower_qoi_value});
     
     %qoi_lower_limit
     uicontrol(...
         'parent',qoi,...
         'Style','edit',...
         'Units','normalized',...
         'Tag',['qoi_ul' int2str(i)],...
         'String',num2str(problem.y(i).u),...
         'Position',[col_start_y(6) row_start_y(i) col_width_y(6) row_height_y],...
         'callback',{@change_upper_qoi_value});
     
     %qoi_color
     qoi_col = uicontrol(...
         'parent',qoi,...
         'Style','pushbutton',...
         'string','Color',...
         'Units','normalized',...
         'Tag',['qoi_col' int2str(i)],...
         'Position',[col_start_y(7) row_start_y(i) col_width_y(7) row_height_y],...
         'callback',{@qoi_col_press});
     
     qoi_col.BackgroundColor = f.UserData.y(i).color;
     
     if sum(qoi_col.BackgroundColor)<=1
        qoi_col.ForegroundColor = 'w';
     else
        qoi_col.ForegroundColor = 'k';
     end
    
 
 end
    % Labels for right-handside parameter manipulation
     uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_p_label(1) row_start_p(end-1)-0.3*row_height_p col_width_p_label(1) row_height_p],...
    'String','Name');

     uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_p_label(2) row_start_p(end-1)-0.3*row_height_p col_width_p_label(2) row_height_p],...
    'String','Unit');

     uicontrol(...
    'parent',qoi,...
    'Style','text',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'FontWeight','bold',...
    'position',[col_start_p_label(3) row_start_p(end-1)-0.3*row_height_p col_width_p_label(3) row_height_p],...
    'String','Value');

 
 for i=1:numpar
     annotation(qoi,'textbox',...
    'horizontalAlignment','center',...
    'VerticalAlignment','middle',...
    'Fontsize',9,...
    'EdgeColor','none',...
    'Units','normalized',...
    'position',[col_start_p(1) row_start_p(i) col_width_p(1) row_height_p],...
    'String',problem.p(i).name);
     
     annotation(qoi,'textbox',...
    'horizontalAlignment','center',...
    'VerticalAlignment','middle',...
    'Fontsize',9,...
    'EdgeColor','none',...
    'Units','normalized',...
    'position',[col_start_p(2) row_start_p(i) col_width_p(2) row_height_p],...
    'String',problem.p(i).unit);

     uicontrol(...
    'parent',qoi,...
    'Style','edit',...
    'horizontalAlignment','center',...
    'Units','normalized',...
    'Tag',['par' int2str(i)],...
    'position',[col_start_p(3) row_start_p(i)-0.0*row_height_p col_width_p(3) row_height_p],...
    'String',num2str(problem.p(i).value),...
    'callback',{@change_par});

     
     
 end
 
 %% Top row & plotting

update_button = uicontrol(...
    'parent',f,...
    'Style','pushbutton',...
    'Tag','update_button',...
    'String','Update',...
    'Units','pixels',...
    'Position',[20 total_height+25 90 30],...   
    'callback',{@update_button_click});     
update_button.BackgroundColor = 'g';

uicontrol(...
    'parent',f,...
    'Style','pushbutton',...
    'String','Load parameters',...
    'Units','pixels',...
    'Position',[130 total_height+25 120 30],...
    'callback',{@load_parameter_click});

uicontrol(...
    'parent',f,...
    'Style','text',...
    'String','Samplesize:',...
    'Units','pixels',...
    'Fontsize',10,...
    'Position',[330 total_height+20 80 30]);

uicontrol(...
    'parent',f,...
    'Style','edit',...
    'String',num2str(f.UserData.sampleSize),...
    'Units','pixels',...
    'Position',[410 total_height+25 90 30],...
    'callback',{@change_sampleSize});
    
uicontrol(...
    'parent',f,...
    'Style','pushbutton',...
    'String','Save',...
    'Units','pixels',...
    'Position',[total_width-100 total_height+25 90 30],...
    'callback',{@save_data});

SolutionSpace(f);
figure(f);


end


%% Main Window Callbacks
function update_button_click(h,~)
update_button = findall(h.Parent,'Tag','update_button');
update_button.BackgroundColor = 'g';
SolutionSpace(h.Parent);
figure(h.Parent);
end


function load_parameter_click(h,~)
f=h.Parent.UserData;
[file, path] = uigetfile(fullfile(pwd,'Data','Parameter_sets','*.xlsx'));
if file ~=0
    table = importdata(fullfile(path,file));
    for i=1:size(table,1)
        for j=1:f.np
            if strcmp(table{i,1},f.p(j).name) && ~isnan(str2double(table{i,2})) && isreal(str2double(table{i,2}))
                % set parameter value in problem object
                f.p(j).value = str2double(table{i,2});
                
                % update_button_flag
                update_button = findall(h.Parent,'tag','update_button');
                update_button.BackgroundColor = 'r';
                
                % change value in parameter edit field
                editfield = findobj('tag',['par' int2str(j)]);
                editfield.String = table{i,2};
            end
        end
    end
end
end

function change_sampleSize(h,~)

ui = h.Parent;
update_button = findall(ui,'Tag','update_button');

value = str2double(get(h,'string'));

if ui.UserData.sampleSize ~= value
    
    ui.UserData.sampleSize = value;
    update_button.BackgroundColor = 'r';
end

end

function update(h,evt)

Pressed_Key = evt.Key;
Pressed_Modifier = evt.Modifier;

if strcmp(Pressed_Key,'u') && isempty(setdiff(Pressed_Modifier,{'control'})) && ~isempty(Pressed_Modifier)
    update_button_handle = findall(h,'Tag','update_button');
    update_button_click(update_button_handle)

end

end

%% Callbacks Design Variable Manipulation
function edit_box_current_lower_value_callback(h,~)
f = h.Parent.Parent.Parent;
dv = h.Parent; 
% Get current edit box text
str_val = get(h,'string');
num_val = str2double(str_val);

% Retrieve slider
i = erase(get(h,'tag'),'current_lower_value');
lower_boundary_element = findall(dv,'tag',['lower_boundary' i]);
value_lower_boundary = str2double(lower_boundary_element.String);

upper_boundary_element = findobj('tag',['current_upper_value' i]);
value_upper_boundary = str2double(upper_boundary_element.String);



% Reset if entered value is not changed, non-numeric or below/above the min/max limits of the slider
if isnan(num_val) || ~isreal(num_val)
    set(h,'string',num2str(f.UserData.x(str2double(i)).l));
    num_val = f.UserData.x(str2double(i)).l;
elseif  num_val < value_lower_boundary
    set(h,'string',num2str(value_lower_boundary));
    num_val = value_lower_boundary;
elseif num_val > value_upper_boundary
    set(h,'string',num2str(value_upper_boundary));
    num_val = value_upper_boundary;
end
    
if f.UserData.x(str2double(i)).l ~= num_val
    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';

    slider = findobj('tag',['slider' i]);
    current_slider_values = get(slider,'UserData');
    slider_position = slider.Position;
   %new_slider_values = [(num_val-f.UserData.x(str2num(i)).l)/(f.UserData.x(str2num(i)).u-f.UserData.x(str2num(i)).l) current_slider_values(1,2)];
    new_slider_values = [(num_val-f.UserData.x(str2double(i)).dsl)/(f.UserData.x(str2double(i)).dsu-f.UserData.x(str2double(i)).dsl) current_slider_values(1,2)];
    delete(slider);


    newslider = superSlider(dv,...
        'min',(0),...
        'max',(1),...
        'numSlides',2,...
        'value',new_slider_values,...
        'stepSize',0.05,...
        'tagName',['slider' i],...
        'callback',{@slider_callback});
    newslider.Position = slider_position;
    f.UserData.x(str2double(i)).l = num_val;
    
end



end

function edit_box_current_upper_value_callback(h,~)
f = h.Parent.Parent.Parent;
dv = h.Parent; 
% Get current edit box text
str_val = get(h,'string');
num_val = str2double(str_val);

% Retrieve slider
i = erase(get(h,'tag'),'current_upper_value');
lower_boundary_element = findobj('tag',['current_lower_value' i]);
value_lower_boundary = str2double(lower_boundary_element.String);

upper_boundary_element = findall(dv,'tag',['upper_boundary' i]);
value_upper_boundary = str2double(upper_boundary_element.String);

% Reset if entered value is not changed, non-numeric or below/above the min/max limits of the slider

if isnan(num_val) || ~isreal(num_val)
    set(h,'string',num2str(f.UserData.x(str2double(i)).u));
    num_val = f.UserData.x(str2double(i)).u;
elseif  num_val > value_upper_boundary
    set(h,'string',num2str(value_upper_boundary));
    num_val = value_upper_boundary;
elseif(num_val < value_lower_boundary)
    set(h,'string',num2str(value_lower_boundary));
    num_val = value_lower_boundary;
end


if num_val ~= f.UserData.x(str2double(i)).u
    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';

    % Adjust the slider
    slider = findobj('tag',['slider' i]);
    current_slider_values = get(slider,'UserData');
    slider_position = slider.Position;
   %new_slider_values = [current_slider_values(1,1) (num_val-f.UserData.x(str2num(i)).l)/(f.UserData.x(str2num(i)).u-f.UserData.x(str2num(i)).l)];
    new_slider_values = [current_slider_values(1,1) (num_val-f.UserData.x(str2double(i)).dsl)/(f.UserData.x(str2double(i)).dsu-f.UserData.x(str2double(i)).dsl)];
    delete(slider);

    newslider = superSlider(dv,...
        'min',(0),...
        'max',(1),...
        'numSlides',2,...
        'value',new_slider_values,...
        'stepSize',0.05,...
        'tagName',['slider' i],...
        'callback',{@slider_callback});
    newslider.Position = slider_position;


    % Store new bounds
    f.UserData.x(str2double(i)).u = num_val;     
end





end

function slider_callback(h)
f = h.Parent.Parent.Parent;

i = h.Tag(7:end);
i = str2double(i);

%check if Value was actually changed
if f.UserData.x(i).l ~= h.UserData(1,1)*(f.UserData.x(i).dsu-f.UserData.x(i).dsl)+f.UserData.x(i).dsl ||...
        f.UserData.x(i).u ~= h.UserData(1,2)*(f.UserData.x(i).dsu-f.UserData.x(i).dsl)+f.UserData.x(i).dsl

    lower_box = findobj('tag',['current_lower_value' int2str(i)]);
    set(lower_box,'string',num2str((h.UserData(1,1))*(f.UserData.x(i).dsu-f.UserData.x(i).dsl)+f.UserData.x(i).dsl));

    upper_box = findobj('tag',['current_upper_value' int2str(i)]);
    set(upper_box,'string',num2str(h.UserData(1,2)*(f.UserData.x(i).dsu-f.UserData.x(i).dsl)+f.UserData.x(i).dsl));

    f.UserData.x(i).l = h.UserData(1,1)*(f.UserData.x(i).dsu-f.UserData.x(i).dsl)+f.UserData.x(i).dsl;
    f.UserData.x(i).u = h.UserData(1,2)*(f.UserData.x(i).dsu-f.UserData.x(i).dsl)+f.UserData.x(i).dsl;
    % Change update button flag
    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';
end



end

function edit_box_current_lower_boundary_callback(h,~)
f = h.Parent.Parent.Parent;
dv = h.Parent; 
% Get current edit box text
str_val = get(h,'string');
num_val = str2double(str_val);

% Retrieve slider
i = erase(get(h,'tag'),'lower_boundary');
lower_value_element = findall(dv,'tag',['current_lower_value' i]);
value_lower_value = str2double(lower_value_element.String);

upper_value_element = findobj('tag',['current_upper_value' i]);
value_upper_value = str2double(upper_value_element.String);

value_upper_boundary = f.UserData.x(str2double(i)).dsu;



% Reset if entered value is not changed, non-numeric or below/above the min/max limits of the slider
if isnan(num_val) || ~isreal(num_val)
    set(h,'string',num2str(f.UserData.x(str2double(i)).dsl));
    num_val = f.UserData.x(str2double(i)).dsl;
elseif  num_val >= value_lower_value
    set(lower_value_element,'string',num2str(num_val));
    value_lower_value = num_val;
    
    if  num_val >= value_upper_value
        set(upper_value_element,'string',num2str(num_val));
        value_upper_value_old = value_upper_value;
        value_upper_value = num_val;
        
        if num_val >= value_upper_boundary
            set(h,'string',num2str(value_upper_boundary-1e-12));
            num_val = value_upper_boundary-1e-12;                 % slider needes finite length
            
            set(lower_value_element,'string',num2str(num_val));
            value_lower_value = num_val;
            
            set(upper_value_element,'string',num2str(max(num_val,value_upper_value_old)));
            value_upper_value = max(num_val,value_upper_value_old);
        end
    end
end

if f.UserData.x(str2double(i)).dsl ~= num_val
    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';

    slider = findobj('tag',['slider' i]);
    slider_position = slider.Position;
    new_slider_values = [(value_lower_value-num_val)/(value_upper_boundary-num_val) (value_upper_value-num_val)/(value_upper_boundary-num_val)];
    delete(slider);


    newslider = superSlider(dv,...
        'min',(0),...
        'max',(1),...
        'numSlides',2,...
        'value',new_slider_values,...
        'stepSize',0.05,...
        'tagName',['slider' i],...
        'callback',{@slider_callback});
    newslider.Position = slider_position;
    f.UserData.x(str2double(i)).dsl = num_val;
    f.UserData.x(str2double(i)).l = value_lower_value;
    f.UserData.x(str2double(i)).u = value_upper_value;
    
end

end

function edit_box_current_upper_boundary_callback(h,~)
f = h.Parent.Parent.Parent;
dv = h.Parent; 
% Get current edit box text
str_val = get(h,'string');
num_val = str2double(str_val);

% Retrieve slider
i = erase(get(h,'tag'),'upper_boundary');
lower_value_element = findall(dv,'tag',['current_lower_value' i]);
value_lower_value = str2double(lower_value_element.String);

upper_value_element = findobj('tag',['current_upper_value' i]);
value_upper_value = str2double(upper_value_element.String);

value_lower_boundary = f.UserData.x(str2double(i)).dsl;



% Reset if entered value is not changed, non-numeric or below/above the min/max limits of the slider
if isnan(num_val) || ~isreal(num_val)
    set(h,'string',num2str(f.UserData.x(str2double(i)).dsl));
    num_val = f.UserData.x(str2double(i)).dsl;
elseif  num_val <= value_upper_value
    set(upper_value_element,'string',num2str(num_val));
    value_upper_value = num_val;
    
    if  num_val <= value_lower_value
        set(lower_value_element,'string',num2str(num_val));
        value_lower_value_old = value_lower_value;
        value_lower_value = num_val;

        if num_val <= value_lower_boundary
            set(h,'string',num2str(value_lower_boundary+1e-12));
            num_val = value_lower_boundary+1e-12;                 % slider needes finite length
            
            set(upper_value_element,'string',num2str(num_val));
            value_upper_value = num_val;
            
            set(lower_value_element,'string',num2str(min(value_lower_value_old,num_val)));
            value_lower_value = min(value_lower_value_old,num_val);
        end
    end
end
    
if f.UserData.x(str2double(i)).dsl ~= num_val
    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';

    slider = findobj('tag',['slider' i]);
    slider_position = slider.Position;
    new_slider_values = [(value_lower_value-value_lower_boundary)/(num_val-value_lower_boundary) (value_upper_value-value_lower_boundary)/(num_val-value_lower_boundary)];
    delete(slider);


    newslider = superSlider(dv,...
        'min',(0),...
        'max',(1),...
        'numSlides',2,...
        'value',new_slider_values,...
        'stepSize',0.05,...
        'tagName',['slider' i],...
        'callback',{@slider_callback});
    newslider.Position = slider_position;
    f.UserData.x(str2double(i)).dsu = num_val;
    f.UserData.x(str2double(i)).l = value_lower_value;
    f.UserData.x(str2double(i)).u = value_upper_value;
    
end

end

%% Callbacks Quantities of interest Manipulation
function active_set(h,~)

f = h.Parent.Parent.Parent;
value = h.Value;
i = erase(get(h,'tag'),'active');

f.UserData.y(str2double(i)).active = value;
update_button = findall(f,'Tag','update_button');
update_button.BackgroundColor = 'r';
f.UserData.legend= f.UserData.CreateLegend(f.UserData.y);


if value == 0    
    set(findall(h.Parent,'Tag',strcat('qoi_name',i)),'Color',[0.5 0.5 0.5]);
    set(findall(h.Parent,'Tag',strcat('qoi_ll',i)),'Enable','off');
    set(findall(h.Parent,'Tag',strcat('qoi_ul',i)),'Enable','off');
    set(findall(h.Parent,'Tag',strcat('qoi_col',i)),'Enable','off');    
end

if value == 1    
    set(findall(h.Parent,'Tag',strcat('qoi_name',i)),'Color','k');
    set(findall(h.Parent,'Tag',strcat('qoi_ll',i)),'Enable','on');
    set(findall(h.Parent,'Tag',strcat('qoi_ul',i)),'Enable','on');
    set(findall(h.Parent,'Tag',strcat('qoi_col',i)),'Enable','on');    
end

end

function change_upper_qoi_value(h,~)
f = h.Parent.Parent.Parent;
num_val = str2double(get(h,'string'));
i = erase(get(h,'tag'),'qoi_ul');

if isnan(num_val) || ~isreal(num_val)
    set(h,'string',num2str(f.UserData.y(str2double(i)).u));
    num_val = f.UserData.y(str2double(i)).u;
end

if f.UserData.y(str2double(i)).u ~= num_val && num_val >= f.UserData.y(str2double(i)).l
    
    f.UserData.y(str2double(i)).u = num_val;
    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';    
else
    h.String = num2str(f.UserData.y(str2double(i)).u);    

end

end

function change_lower_qoi_value(h,~)
f = h.Parent.Parent.Parent;
num_val = str2double(get(h,'string'));
i = erase(get(h,'tag'),'qoi_ll');

if isnan(num_val) || ~isreal(num_val)
    set(h,'string',num2str(f.UserData.y(str2double(i)).l));
    num_val = f.UserData.y(str2double(i)).l;
end

if f.UserData.y(str2double(i)).l ~= num_val && num_val <= f.UserData.y(str2double(i)).u
    
    f.UserData.y(str2double(i)).l = num_val;
    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';
else
    h.String = num2str(f.UserData.y(str2double(i)).l);
end



end

function qoi_col_press(h,~)
f = h.Parent.Parent.Parent;
i = erase(get(h,'tag'),'qoi_col');
new_color = uisetcolor;

if length(new_color) == 3
    f.UserData.y(str2double(i)).color = new_color;
    f.UserData.legend= f.UserData.CreateLegend(f.UserData.y);
    h.BackgroundColor = f.UserData.y(str2double(i)).color;

    % if min(h.BackgroundColor<[0.4 0.4 0.4])==1
    if sum(h.BackgroundColor)<=1
        h.ForegroundColor = 'w';
    else
        h.ForegroundColor = 'k';
    end


    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';
end
    



end


function change_par(h,~)
f = h.Parent.Parent.Parent;
num_val = str2double(get(h,'string'));
i = erase(get(h,'tag'),'par');

if isnan(num_val) || ~isreal(num_val)
    set(h,'string',num2str(f.UserData.p(str2double(i)).value));
    num_val = f.UserData.p(str2double(i)).value;
end

if f.UserData.p(str2double(i)).value ~= num_val
    f.UserData.p(str2double(i)).value = num_val;
    update_button = findall(f,'Tag','update_button');
    update_button.BackgroundColor = 'r';
end
    

end

function visible_set(h,~)

ui = h.Parent.Parent.Parent;
rf = findobj('type','figure','name','results');

i = str2double(erase(h.Tag,'visible'));
value = h.Value;

col = findall(ui,'Tag',['qoi_col' num2str(i)]);

for j = 1:length(ui.UserData.diagram(:,1))
    
    plot = findall(rf,'Tag',['plot' num2str(j)]);
    
    bad_samples = findall(plot,'Color',col.BackgroundColor,'Tag','');

    if value == 0 %&& isempty(get(bad_samples, 'Tag'))
        set(bad_samples,'Visible','off');
    else
        set(bad_samples,'Visible','on');
    end

end
end

function save_data(h,~)

ui = h.Parent;

ScreenSize = get( groot, 'Screensize' );

save_fig = figure('MenuBar','none','ToolBar','none');
set(save_fig,'Name','Sure?');
set(save_fig,'Position',[(ScreenSize(3)-700)/2, (ScreenSize(4)-200)/2, 700, 200]);

uicontrol('parent',save_fig,...
    'style','text',...
    'String','Are you sure you want to save plots, design variables and quantities of interrest?',...
    'fontsize',15,...
    'Units','normalized',...
    'position',[0 0.6 1 0.3],...
    'UserData',ui.UserData);

uicontrol('parent',save_fig,...
    'style','pushbutton',...
    'String','Yes',...
    'Units','normalized',...
    'position',[0.1 0.15 0.2 0.15],...
    'UserData',ui.UserData,...
    'callback',{@save_data_yes});


uicontrol('parent',save_fig,...
    'style','pushbutton',...
    'String','No',...
    'Units','normalized',...
    'position',[0.4 0.15 0.2 0.15],...
    'UserData',ui.UserData,...
    'callback',{@save_data_no});

uicontrol('parent',save_fig,...
    'style','pushbutton',...
    'String','Save and close',...
    'Units','normalized',...
    'position',[0.7 0.15 0.2 0.15],...
    'UserData',ui.UserData,...
    'callback',{@save_data_and_close});

end

function save_data_yes(h,~)

OBJ = h.UserData;

save_fig = h.Parent;

Matlabs = h.UserData.save_as;

filename = strcat(pwd,'\Data\Save\',Matlabs);

save(filename,'OBJ');

close(save_fig);

end

function save_data_no(h,~)

save_fig = h.Parent;
close(save_fig);

end

function save_data_and_close(h,~)

OBJ = h.UserData;

Matlabs = h.UserData.save_as;

filename = strcat(pwd,'\Data\Save\',Matlabs);

save(filename,'OBJ');

close all;

end

