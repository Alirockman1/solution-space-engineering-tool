function solution_space_plot(dataManager)

    % Close the already existing figure
    allFigures = findall(0, 'Type', 'figure');
    for i = 1:length(allFigures)
        if allFigures(i) == 2
            close(allFigures(i));                                          % Close the figure
        end
    end

    % desired plots by design variable index
    plotTiles = [1,size(dataManager.DesiredPlots, 2)];                     % 2 rows, 3 columns of subplots

    % Determine the design box to use
    if (~isnan([dataManager.DesignVariables.dinit]))                       % Ensure design initialization is valid
        if isempty(dataManager.OptimumDesignBox)
            dataManager.DesignBox = [[dataManager.DesignVariables.sblb];...
                [dataManager.DesignVariables.sbub]];                       % Use the original design box
        else
            dataManager.DesignBox = dataManager.OptimumDesignBox;          % Use the OptimdesignBox
        end
    else
        dataManager.DesignBox = [[dataManager.DesignVariables.dslb]/2;...
            [dataManager.DesignVariables.dsub]/2];
    end

    for i = 1:size(dataManager.DesiredPlots, 2)
        desiredPlots(i, :) = [dataManager.DesiredPlots(i).axdes{1}, dataManager.DesiredPlots(i).axdes{2}];  % Fill in the rows
        axisLabel{i} = dataManager.Labels(i).dispname;  % Store each name in the cell array 
    end
    
    [dataManager.PlotHandles, ~, dataManager.PlotData] = plot_selective_design_space_projection( ...
        dataManager.DesignEvaluator, ...
        dataManager.DesignBox, ...
        [dataManager.DesignVariables.dslb], ...
        [dataManager.DesignVariables.dsub], ...
        desiredPlots, ...
        plotTiles, ...
        'NumberSamplesPerPlot', str2double(dataManager.ExtraOptions.SampleSize), ...
        'AxesLabels', axisLabel, ...
        'MarkerColorsViolatedRequirements', 'r', ...
        'PlotOptionsBad', {'Marker', 'x'}, ...
        'CurrentFigure', []);

    % Reset OptimdesignBox after the solution space has run
    dataManager.OptimumDesignBox = [];


    % Create dragable boundaries
    for i = 1:length(dataManager.PlotHandles.IndividualPlots)

        % Hold on to add draggable lines
        hold(dataManager.PlotHandles.IndividualPlots(i), 'on');

        % Extract variable indices for the current subplot
        xVarIndex = desiredPlots(i, 1); % X variable index
        yVarIndex = desiredPlots(i, 2); % Y variable index

        % Debugging output
        fprintf('Subplot %d: xVarIndex = %d, yVarIndex = %d\n', i, xVarIndex, yVarIndex);
 
        % Create vertical lines for the bounds
        vLineLower = line(dataManager.PlotHandles.IndividualPlots(i),...
            [dataManager.DesignVariables(xVarIndex).sblb;...
            dataManager.DesignVariables(xVarIndex).sblb], ...
            ylim(dataManager.PlotHandles.IndividualPlots(i)),...
            'Color', 'b', 'LineStyle', '--', ...
            'UserData', struct('type', 'left', 'index', xVarIndex), ...
            'Visible', 'on', 'HandleVisibility', 'on');

        vLineUpper = line(dataManager.PlotHandles.IndividualPlots(i),...
            [dataManager.DesignVariables(xVarIndex).sbub;...
            dataManager.DesignVariables(xVarIndex).sbub], ...
            ylim(dataManager.PlotHandles.IndividualPlots(i)),...
            'Color', 'b', 'LineStyle', '--', ...
            'UserData', struct('type', 'right', 'index', xVarIndex), ...
            'Visible', 'on', 'HandleVisibility', 'on');

        % Create horizontal lines for the bounds
        hLineLower = line(dataManager.PlotHandles.IndividualPlots(i),...
            xlim(dataManager.PlotHandles.IndividualPlots(i)), ...
            [dataManager.DesignVariables(yVarIndex).sblb;...
            dataManager.DesignVariables(yVarIndex).sblb], 'Color', 'b', ...
            'LineStyle', '--', 'UserData', struct('type', 'lower', 'index', yVarIndex), ...
            'Visible', 'on', 'HandleVisibility', 'on');

        hLineUpper = line(dataManager.PlotHandles.IndividualPlots(i),...
            xlim(dataManager.PlotHandles.IndividualPlots(i)), ...
            [dataManager.DesignVariables(yVarIndex).sbub;...
            dataManager.DesignVariables(yVarIndex).sbub], 'Color', 'b', ...
            'LineStyle', '--', 'UserData', struct('type', 'upper', 'index', yVarIndex), ...
            'Visible', 'on', 'HandleVisibility', 'on');

        % Set the ButtonDownFcn for dragging
        set([vLineLower, vLineUpper, hLineLower, hLineUpper],...
            'ButtonDownFcn', @(src, event) start_drag_function(src, event, dataManager));

        hold(dataManager.PlotHandles.IndividualPlots(i), 'off');
    end

    legend([dataManager.PlotHandles.GoodPerformance,...
        dataManager.PlotHandles.BadPerformance],...
        {'Good Designs','Violate Distance Requirement'});
    sgtitle('3D Sphere - Box Decomposition');
end