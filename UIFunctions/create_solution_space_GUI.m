%% Creating GUI template
function create_solution_space_GUI(dataManager)
    %% Create GUI layout

    % Retrive Screen size
    screenSize = get(0, 'ScreenSize');

    % Define GUI Screen
    hFig = uifigure('Name', 'Solution Space GUI', 'NumberTitle', 'off');
    hFig.Position = [screenSize(1), screenSize(2)+10, screenSize(3), screenSize(4)-10]; % Set the figure to full screen
    hFig.WindowState = 'maximized';

    %% Prepare a GUI %%
    % Define Tabs to be added to the screen
    tabgp = uitabgroup('Parent', hFig, 'Units', 'normalized',...
                        'Position',[.020 .15 0.4 .8]);
    tab1 = uitab(tabgp,"Title","Design Variable");
    tab4 = uitab(tabgp,"Title","Quantaties of Interest");
    tab2 = uitab(tabgp,"Title","Values from Plot");
    tab3 = uitab(tabgp,"Title","PostProcessing");

    %% 1. Tab for Design variables %%
    % Create a main panel for the sliders and inputs
    mainPanel = uipanel('Parent', tab1, 'Title', 'Design Variables', ...
                        'Units', 'normalized',...
                        'Position', [0.025 0.025 0.95 0.95]);

    % Sliders and textboxes for each design variable
    nVariables = length(dataManager.DesignVariables);  % Number of design variables
    dataManager.SliderHandles = gobjects(nVariables, 2);  % Store slider handles for lower and upper bounds
    dataManager.TextHandles = gobjects(nVariables, 2);    % Store text box handles for lower and upper values

    % Calculate the panel height for each variable
    panelHeight = 1/nVariables;  % Equal distribution of space
    tabPosition = mainPanel.Parent(1).Position; % get width based on tab
    panelPixelWidth = tabPosition(3);
    panelPixelHeight = tabPosition(4)*panelHeight;

    for variableIteration = 1:nVariables
        % Create a panel for each variable
        variablePanel = uipanel('Parent', mainPanel, 'Title', dataManager.Labels(variableIteration).dispname, ...
                                'Units', 'normalized', ...
                                'Position', [0.02, 1 - variableIteration*panelHeight, 0.96, panelHeight-0.02]);

        % Design Space Lower Bound (leftmost)
        designSpaceHandles(variableIteration, 1) = uicontrol('Parent', variablePanel, 'Style', 'edit', ...
                                         'String', num2str(dataManager.DesignVariables(variableIteration).dslb, '%.2f'), ...
                                         'Units', 'normalized', ...
                                         'Position', [0.02, 0.4, 0.08, 0.3], ...
                                         'FontSize', 9, 'ForegroundColor', 'red', ...
                                         'Callback', @(src, event) design_textbox_callback(src, dataManager, variableIteration, 1));

        % Solution Space Lower Bound
        dataManager.TextHandles(variableIteration, 1) = uicontrol('Parent', variablePanel, 'Style', 'edit', ...
                                      'String', num2str(dataManager.DesignVariables(variableIteration).sblb, '%.2f'), ...
                                      'Units', 'normalized', ...
                                      'Position', [0.11, 0.4, 0.08, 0.3], ...
                                      'Callback', @(src, event) textbox_callback(dataManager, variableIteration, 1));

        % Create the slider with adjusted position
        % get sizes
        sliderLeft = 0.20*panelPixelWidth;
        sliderBottom = 0.4*panelPixelHeight;
        sliderWidth = 0.5*panelPixelWidth;
        sliderHeight = 0.25*panelPixelHeight;
        dataManager.SliderHandles(variableIteration) = uislider(variablePanel, ...
                                        'range', ...
                                        'Limits', [dataManager.DesignVariables(variableIteration).dslb dataManager.DesignVariables(variableIteration).dsub], ...
                                        'Value', [dataManager.DesignVariables(variableIteration).sblb dataManager.DesignVariables(variableIteration).sbub], ...
                                        'MinorTicks', [], ...
                                        'Position', [sliderLeft, sliderBottom, sliderWidth, sliderHeight],...
                                        'ValueChangedFcn', @(src, event) slider_callback(dataManager, variableIteration));

        % Solution Space Upper Bound
        dataManager.TextHandles(variableIteration, 2) = uicontrol('Parent', variablePanel, 'Style', 'edit', ...
                                      'String', num2str(dataManager.DesignVariables(variableIteration).sbub, '%.2f'), ...
                                      'Units', 'normalized', ...
                                      'Position', [0.81, 0.4, 0.08, 0.3], ...
                                      'Callback', @(src, event) textbox_callback(dataManager, variableIteration, 2));

        % Design Space Upper Bound (rightmost)
        designSpaceHandles(variableIteration, 2) = uicontrol('Parent', variablePanel, 'Style', 'edit', ...
                                         'String', num2str(dataManager.DesignVariables(variableIteration).dsub, '%.2f'), ...
                                         'Units', 'normalized', ...
                                         'Position', [0.90, 0.4, 0.08, 0.3], ...
                                         'FontSize', 9, 'ForegroundColor', 'red', ...
                                         'Callback', @(src, event) design_textbox_callback(src, dataManager, variableIteration, 2));
    end

    %% 2. Tab for QoI %%
    QoItab = uipanel('Parent', tab4, 'Title', 'Quantaties of Interest', ...
                             'Units', 'normalized',...
                             'Position', [0.015 0.15 0.9 0.875]);

    % Sliders and textboxes for each design variable
    nQOI = length(dataManager.QOIs);  % Number of design variables
    chkHandles = gobjects(nQOI, 1);         % Store active status
    dataManager.QOITextHandles = gobjects(nQOI, 2);    % Store text box handles for lower and upper values

     % Calculate the panel height for each variable based on the number of variables
    panelHeight = 0.9 / nQOI;  % Adjust 0.9 for some space between the panels

    for variableIteration = 1:nQOI
        % Create a panel for each variable
        QOIPanel = uipanel('Parent', QoItab, 'Title', dataManager.QOIs(variableIteration).dispname, ...
                           'Units', 'normalized', ...
                           'Position', [0.05, 0.95 - variableIteration * panelHeight, 0.9, panelHeight]);
    
        % Label for 'InActive'
        uicontrol('Parent', QOIPanel, 'Style', 'text', 'String', 'InActive', ...
                  'Units', 'normalized', 'Position', [0.01, 0.65, 0.15, 0.3], ...
                  'HorizontalAlignment', 'center');
    
        % Checkbox for 'InActive'
        chkHandles(variableIteration) = uicontrol('Parent', QOIPanel, ...
                        'Style', 'checkbox', ...
                        'Units', 'normalized', ...
                        'Position', [0.07, 0.7, 0.08, 0.35], ...
                        'FontSize', 10, ...
                        'Callback', @(hObject, ~) toggle_textbox(hObject, dataManager, variableIteration));
    
        % Label for 'Lower Bound'
        uicontrol('Parent', QOIPanel, 'Style', 'text', 'String', 'Lower Bound', ...
                  'Units', 'normalized', 'Position', [0.20, 0.65, 0.2, 0.3], ...
                  'HorizontalAlignment', 'center');
    
        % Label for 'Upper Bound'
        uicontrol('Parent', QOIPanel, 'Style', 'text', 'String', 'Upper Bound', ...
                  'Units', 'normalized', 'Position', [0.50, 0.65, 0.2, 0.3], ...
                  'HorizontalAlignment', 'center');
    
        % Textbox for the lower bound
        dataManager.QOITextHandles(variableIteration, 1) = uicontrol('Parent', QOIPanel, 'Style', 'edit', ...
                                          'String', num2str(dataManager.QOIs(variableIteration).crll, '%.2f'), ...
                                          'Units', 'normalized', ...
                                          'Position', [0.20, 0.815, 0.2, 0.075]); % Centered below 'Lower Bound'
    
        % Textbox for the upper bound
        dataManager.QOITextHandles(variableIteration, 2) = uicontrol('Parent', QOIPanel, 'Style', 'edit', ...
                                          'String', num2str(dataManager.QOIs(variableIteration).crul, '%.2f'), ...
                                          'Units', 'normalized', ...
                                          'Position', [0.50, 0.815, 0.2, 0.075]); % Centered below 'Upper Bound'
        
        % Label for 'Colour'
        uicontrol('Parent', QOIPanel, 'Style', 'text', 'String', 'Colour', ...
                  'Units', 'normalized', 'Position', [0.75, 0.65, 0.2, 0.3], ...
                  'HorizontalAlignment', 'center');

        % Define the normalized position for the color picker
        normalizedPos = [0.75, 0.580, 0.08, 0.05]; % [x, y, width, height]
        
        % Compute absolute position based on panel size
        panelPosition = getpixelposition(QOIPanel); % Get the panel's position (normalized in mainFig)
        absolutePosition = [(panelPosition(1) + panelPosition(3)) * normalizedPos(1), ... % X
                  (panelPosition(2) + panelPosition(4)) * normalizedPos(2), ... % Y
                  panelPosition(3) * normalizedPos(3), ...              % Width
                  panelPosition(4) * normalizedPos(4)];                % Height
        
        % Add the uicolorpicker with adjusted position
        uicolorpicker('Parent', QOIPanel, ...
                    'Position', absolutePosition, ...
                    ValueChangedFcn=@(src,event) update_color(src, dataManager, variableIteration));
    end

    %% 3. Update QOI
    uicontrol('Parent', QoItab, 'Style', 'pushbutton', 'String', 'Update QOI Data', ...
              'Units', 'normalized', 'Position', [0.375, 0.035, 0.25, 0.08], ...
              'BackgroundColor', [0.94, 0.94, 0.94], ...
              'Callback', @(src, event) update_qoi_callback(dataManager, nQOI));


    %% 4. Tab to display selected values dynamically (for nVars variables) %%
    selectionPanel = uipanel('Parent', tab2, 'Title', 'Selected Values from Plot', ...
                             'Units', 'normalized',...
                             'Position', [0.015 0.15 0.9 0.875]);

    % Create a dynamic display for each variable
    textAreas = gobjects(nVariables+1, 1);  % Store text area handles
    for tA = 1:nVariables
        % Labels for each design variable
        uicontrol('Parent', selectionPanel, 'Style', 'text',...
            'String', [dataManager.Labels(tA).dispname ':'], ...
            'Units', 'normalized', 'Position', [0.05, 1 - tA*0.15, 0.3, 0.1]);

        % Text areas for each variable to display selected value
        textAreas(tA) = uicontrol('Parent', selectionPanel, ...
            'Style', 'edit', 'String', 'N/A','Units', 'normalized', ...
            'Position', [0.35, 1 - tA*0.15, 0.6, 0.1], 'Enable', 'off');
    end

    % Labels for design variable
    for JA = 1:length(dataManager.QOIs.varname)
        uicontrol('Parent', selectionPanel, 'Style', 'text',...
            'String', dataManager.QOIs.varname(JA), ...
            'Units', 'normalized', 'Position', [0.05, 1 - (tA+JA)*0.15, 0.3, 0.1]);
    
        % Text areas for design variable
        textAreas(tA+1) = uicontrol('Parent', selectionPanel, ...
            'Style', 'edit', 'String', 'N/A','Units', 'normalized', ...
            'Position', [0.35, 1 - (tA+JA)*0.15, 0.6, 0.1],'Enable', 'off');
    end

    % 2. Add a Button to Select Data from the Plot
    uicontrol('Parent', selectionPanel, 'Style', 'pushbutton',...
        'String', 'Select Data from Plot', 'Units', 'normalized', ...
        'Position', [0.15, 1 - (tA+2.5)*0.15, 0.6, 0.1], ...
        'Callback', @(src, event) select_data_from_plot(dataManager,textAreas));

    %% 5. Tab to Create Post-processing Panel %%

    % Create the Post-processing Panel with relative position in the main figure
    postProcessingPanel = uipanel('Parent', tab3, 'Title', 'Post-processing', ...
                                  'Units', 'normalized',...
                                  'Position', [0.015, 0.55, 0.95, 0.4]);
    
    % Text box for Excel file name
    uicontrol('Parent', postProcessingPanel, 'Style', 'text', 'String', 'Excel File Name:', ...
        'Units', 'normalized', 'Position', [0.05, 0.8, 0.5, 0.1], 'HorizontalAlignment', 'left');
    dataManager.PostTextHandles(1) = uicontrol('Parent', postProcessingPanel, 'Style', 'edit', ...
        'Units', 'normalized', 'Position', [0.35, 0.8, 0.45, 0.1]);
    
    % Text box for Figure file name
    uicontrol('Parent', postProcessingPanel, 'Style', 'text', 'String', 'Figure File Name:', ...
        'Units', 'normalized', 'Position', [0.05, 0.6, 0.5, 0.1], 'HorizontalAlignment', 'left');
    dataManager.PostTextHandles(2) = uicontrol('Parent', postProcessingPanel, 'Style', 'edit', ...
        'Units', 'normalized', 'Position', [0.35, 0.6, 0.45, 0.1]);
    
    % Text box for Save Path
    uicontrol('Parent', postProcessingPanel, 'Style', 'text', 'String', 'Save Path:', ...
        'Units', 'normalized', 'Position', [0.05, 0.4, 0.5, 0.1], 'HorizontalAlignment', 'left');
    dataManager.PostTextHandles(3) = uicontrol('Parent', postProcessingPanel, 'Style', 'edit', ...
        'Units', 'normalized', 'Position', [0.35, 0.4, 0.55, 0.1]);
    
    % Save button at the bottom of the GUI
    uicontrol('Parent', postProcessingPanel, 'Style', 'pushbutton',...
        'String', 'Save Figure and Data','Units', 'normalized',...
        'Position', [0.2, 0.1, 0.6, 0.15],...
        'Callback', @(src, event) save_files(src, event, dataManager, hFig));
    
    %% 6. Update Plot button at the bottom of the GUI
    uicontrol('Parent', hFig, 'Style', 'pushbutton', 'String', 'Update Plot', ...
              'Units', 'normalized', 'Position', [0.325, 0.035, 0.2, 0.08], ...
              'Callback', @(src, event) update_plot(dataManager,nVariables));
    
    %% 7. Rerun the Optimization
    uicontrol('Parent', hFig, 'Style', 'pushbutton', 'String', 'Optimize', ...
              'Units', 'normalized', 'Position', [0.55, 0.035, 0.1, 0.08], ...
              'BackgroundColor', [0.94, 0.94, 0.94], ...
              'Callback', @(src, event) run_optimization(dataManager));

    %% 8. Plot
    % Create the figure box for placing figure
    uipanel('Parent', hFig, 'Title', 'Solution Space', ...
                        'Units', 'normalized', ...
                        'Position', [0.45, 0.15, 0.50, 0.80]);
    
    % axes('Parent', hFig, 'Position', [0.20, 0.55, 0.9, 0.6]);
    axis off;  % Turn off axis for the figure box
    solution_space_plot(dataManager);

    % nRows = 1; % FIX: read from table, plot
    % nCols = 3; % FIX: read from table, plot
    % totalCells = nRows * nCols;
    % solutionSpaceGrid =  uigridlayout(figureBox, [nRows,nCols]);
    % % Make all rows and columns have equal (flexible) size
    % solutionSpaceGrid.RowHeight = repmat({'1x'}, 1, nRows);
    % solutionSpaceGrid.ColumnWidth = repmat({'1x'}, 1, nCols);
    % nPlots = 3; % FIX: read from table, plot
    % for k = 1:totalCells
    %     currentAxis = uiaxes(solutionSpaceGrid);
    % end

end